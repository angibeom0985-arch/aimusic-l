import React, { useState, useCallback, useEffect } from "react";
import { INITIAL_GENRES } from "../constants";
import { generateLyrics } from "../services/geminiService";
import Button from "../components/Button";
import DisplayAd from "../components/DisplayAd";
import LoadingSpinner from "../components/LoadingSpinner";
import { handleCopyDownload } from "../utils/coupang";

const MainPage: React.FC = () => {
  const [apiKey, setApiKey] = useState("");
  const [selectedGenre, setSelectedGenre] = useState("");
  const [customGenre, setCustomGenre] = useState("");
  const [titles, setTitles] = useState<string[]>([]);
  const [selectedTitle, setSelectedTitle] = useState("");
  const [customTitle, setCustomTitle] = useState("");
  const [themes, setThemes] = useState<string[]>([]);
  const [selectedTheme, setSelectedTheme] = useState("");
  const [customTheme, setCustomTheme] = useState("");
  const [lyrics, setLyrics] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // API 키 로드
  useEffect(() => {
    const stored = localStorage.getItem("gemini_api_key");
    if (stored) {
      setApiKey(stored);
    }
  }, []);

  const handleReset = () => {
    setSelectedGenre("");
    setCustomGenre("");
    setTitles([]);
    setSelectedTitle("");
    setCustomTitle("");
    setThemes([]);
    setSelectedTheme("");
    setCustomTheme("");
    setLyrics("");
    setError(null);
  };

  const handleGenerateLyrics = async () => {
    if (!apiKey) {
      setError("API 키를 먼저 설정해주세요.");
      return;
    }

    const finalGenre = selectedGenre || customGenre;
    const finalTitle = selectedTitle || customTitle;
    const finalTheme = selectedTheme || customTheme;

    if (!finalGenre || !finalTitle || !finalTheme) {
      setError("장르, 제목, 주제를 모두 선택하거나 입력해주세요.");
      return;
    }

    setIsGenerating(true);
    setError(null);

    try {
      const result = await generateLyrics(apiKey, finalGenre, finalTitle, finalTheme);
      setLyrics(result);
    } catch (err) {
      setError("가사 생성에 실패했습니다. API 키를 확인하거나 다시 시도해주세요.");
      console.error(err);
    } finally {
      setIsGenerating(false);
    }
  };

  const renderStep = () => {
    if (!apiKey) {
      return (
        <div className="bg-zinc-900 border border-zinc-800 rounded-xl p-8 max-w-2xl mx-auto">
          <h2 className="text-2xl font-bold mb-4 text-center">시작하기</h2>
          <ApiKeyManager onKeySet={setApiKey} />
          <DisplayAd />
          <div className="mt-6 text-zinc-400 text-sm">
            <h3 className="font-semibold mb-2">작사의 신이란?</h3>
            <p>
              AI가 당신만의 노래 가사를 만들어드립니다. 장르, 제목, 테마를
              선택하면 감성적이고 창의적인 가사가 완성됩니다.
            </p>
          </div>
        </div>
      );
    }

    switch (step) {
      case AppStep.GENRE:
        return (
          <StepGenre
            onGenreSelect={handleGenreSelect}
            genres={INITIAL_GENRES}
          />
        );
      case AppStep.TITLE:
        return (
          <StepTitle
            genre={selections.genre}
            onTitleSelect={handleTitleSelect}
            onBack={handleBack}
            apiKey={apiKey}
          />
        );
      case AppStep.THEME:
        return (
          <StepTheme
            genre={selections.genre}
            title={selections.title}
            onThemeSelect={handleThemeSelect}
            onBack={handleBack}
            apiKey={apiKey}
          />
        );
      case AppStep.GENERATING:
        return (
          <StepGenerating
            selections={selections}
            setLyrics={setLyrics}
            setStep={setStep}
            setError={setError}
            apiKey={apiKey}
          />
        );
      case AppStep.RESULT:
        return (
          <StepResult lyrics={lyrics} onReset={handleReset} error={error} />
        );
      default:
        return (
          <StepGenre
            onGenreSelect={handleGenreSelect}
            genres={INITIAL_GENRES}
          />
        );
    }
  };

  return (
    <>
      <DisplayAd />
      <div className="w-full max-w-2xl mx-auto">{renderStep()}</div>
      <DisplayAd />
    </>
  );
};

export default MainPage;
